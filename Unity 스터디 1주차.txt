<Unity 스터디 1주차 : 기초 조작 및 스크립팅>

[Project 생성]
Unity Hub 실행 → '프로젝트' 탭에서 '새로 생성' 버튼 → 3D 선택 → 프로젝트 이름 지정 후, '생성' 버튼 클릭

[객체 지향]
- Unity에서는 오브젝트에 클래스, 즉 스크립트(script)를 적용하여 고유한 특징을 부여할 수 있다.
(ex> 플레이어 스크립트 : 이동, 공격,... , 적 스크립트 : 플레이어 추격, 플레이어 공격, 죽음, ..., 제어 스크립트 : 체력 관리, 시간 관리, 점수 관리,...)

[Unity General Window]
- Scene : 실질적으로 객체들을 배치하는 공간
- Hierarchy : Scene 위에 올라가있는 객체들을 계층 구조로 나타냄
- Asset : Scene과 연관될 수 있는 모든 파일을 저장하는 공간(창고 개념)
- Inspector : 객체의 속성을 나타내는 상태창
	◇ Transform : 객체의 위치, 회전, 크기 등을 담는 Component
- Console : Unity에서 생성되는 오류, 경고, 기타 메시지를 표시

[Scene 조작]
- 마우스 왼쪽 드래그 : 오브젝트 선택
- 마우스 오른쪽 이동 : 시야 회전
- 마우스 휠 이동 : 시야 평면 이동
- 오른쪽 좌표 축 클릭 : 좌표 이동
- Persp/Iso : 시야 3D/2D 전환
- 오브젝트 더블 클릭 : 오브젝트 위치로 이동
- Tool 조작
	◇ HandTool : 시야 평면 이동
	◇ MoveTool : 오브젝트 이동
	◇ RotateTool : 오브젝트 회전
	◇ ScaleTool : 오브젝트 크기 조절
	
[필수 오브젝트]
- Camera : 사용자가 바라보는 시점을 다루는 객체
- Directional Light : 빛을 표현하는 객체

[Plane위의 큐브 생성하기]
- Plane 생성하기 : GameObject → 3D Object → Plane
- Project 탭의 Assets에서 Materials 폴더 생성 후,  Create → Material 생성
	◇ Material : 객체의 시각적인 표현 형태
- Plane에 Material 적용 후, Albedo 값을 변경하여 Material 색상 변경
- Cube 생성하기 : GameObject → 3D Object → Cube
- Cube 오브젝트에 Rigidbody 컴포넌트 Add하기
	◇ RigidBody : 객체의 물리적 특성을 담는 Component
	◇ Collider : 충돌 판정 범위

[Unity 스크립팅 개념]
- Unity 스크립팅은 C#을 기반으로 한다.
- C#은 GC가 존재한다.
- 스크립트는 컴포넌트이다.
- 유니티에서는 GameObject, Transform, Rigidbody, Collider, Material,... 등 여러 자료형이 존재한다.
- float형은 0.1f, double형은 0.1 또는 0.1d 형태로 구분한다 (구분하지 않으면 에러 발생할 수 있음)
- 스크립트 명과 클래스 명은 항상 같아야 한다. (매우 중요)
- Start 함수는 첫 번째 프레임이 실행되기 전에 실행되는 함수
- Update 함수는 매 프레임마다 실행되는 함수

[Vector3 클래스]
- Vector3 클래스는 float의 값을 동시에 세 개(x, y, z) 지니고, 벡터 연산을 할 수 있는 유용한 함수를 포함하고 있다.
	◇ 가능 예제 : Vector3 vec = new Vector3(1f, 2f, 3f);
	◇ 불가능 예제 : vec.x = 1f;

[Debug 클래스]
- Debug.Log(<Object>); 함수를 통해 Console창에 입력할 수 있다. (오버로딩이 굉장히 많은 함수)
	◇ Debug.Log("문자열"); //문자열 출력
	◇ Debug.Log(1); //정수 출력
	◇ Debug.Log(new Vector3(1f, 2f, 3f)); //Vector3 자료형 출력

[오브젝트 참조 및 Transfrom 조작]
- GameObject.Find("오브젝트 이름"). ... 함수는 최상위부터 해당 이름에 맞는 오브젝트를 탐색하여 반환한다.
- GetComponent<T>() 형식을 통해 오브젝트의 속성을 불러올 수 있다.
- GetComponent<Transform>().position은 객체의 위치를 담는 변수이다.

[접근 지정자]
- this 연산자를 통해 현재 스크립트가 있는 객체를 선택할 수 있다.
- private, public 접근 지정자를 통해 데이터의 캡슐화가 가능하다.
- public을 사용한 변수는 에디터 상에서 조작(데이터 수정, 드래그 앤 드랍)이 가능하며, 다른 스크립트에서도 참조가 가능하다.

[키보드 입력]
- Input.GetKey(KeyCode.[입력])을 통해 키 입력을 받을 수 있다. (누르고 있으면 true 반환)

[스크립트 참조]
- 접근 지정자가 public인 클래스는 컴포넌트로써 참조가 가능하다.
- 참조한 클래스의 public 변수도 참조가 가능하다.